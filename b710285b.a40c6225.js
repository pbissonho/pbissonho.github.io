(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{168:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return p}));var o=n(2),r=n(9),a=(n(0),n(177)),i={title:"Scope"},c={id:"reference/koin-flutter/scope",isDocsHomePage:!1,title:"Scope",description:"The koin_flutter package is dedicated to bring Flutter scope features to the existing Scope API.",source:"@site/docs/reference/koin-flutter/scope.md",permalink:"/docs/reference/koin-flutter/scope",editUrl:"https://github.com/pbissonho/koin.dart/tree/master/website/docs/reference/koin-flutter/scope.md",sidebar:"docs",previous:{title:"Start",permalink:"/docs/reference/koin-flutter/start"},next:{title:"ScopeProvider",permalink:"/docs/reference/koin-flutter/scope_provider"}},l=[{value:"Taming the Widgets lifecycle",id:"taming-the-widgets-lifecycle",children:[]},{value:"ScopeStateMixin",id:"scopestatemixin",children:[]}],s={rightToc:l};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(o.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"koin_flutter")," package is dedicated to bring Flutter scope features to the existing Scope API."),Object(a.b)("h2",{id:"taming-the-widgets-lifecycle"},"Taming the Widgets lifecycle"),Object(a.b)("p",null,"Flutter widgets are mainly managed by ther widget tree, that use the lifecycle functions of the widgets, such as\n",Object(a.b)("inlineCode",{parentName:"p"},"initState()")," and ",Object(a.b)("inlineCode",{parentName:"p"},"dispose()"),"."),Object(a.b)("p",null,"That's why we can't describe our StatefulWidget/StatelessWidget in a Koin module. We need then to inject dependencies into properties and also respect the lifecycle.\nThen we have:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"long live components (Services, Data Repository ...) - used by several screens, never dropped"),Object(a.b)("li",{parentName:"ul"},"medium live components (BLoC ...) - used by several screens, must be dropped after an amount of time"),Object(a.b)("li",{parentName:"ul"},"short live components (BLoC ...) - used by only one screen & must be dropped at the end of the screen")),Object(a.b)("p",null,"Long live components can be easily described as ",Object(a.b)("inlineCode",{parentName:"p"},"single")," definitions. For medium and short live components we can have several approaches."),Object(a.b)("p",null,"In the case of BLoC pattern, the BLoC class can be used as a short or medium live component to help/support the UI. The BLoC instance must be created each time the widget is showing and dropped once widget is removed from the widget tree."),Object(a.b)("p",null,"Some Blocs can be used as a long live components,for example, to control authentication,\nbut in most cases they are used as short or medium live."),Object(a.b)("p",null,"A new Bloc is created each time"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-dart"}),"class LoginBloc extends Bloc {\n\n    // Streams\n    ...\n    ...\n    ...\n\n    // Close the Streams\n    void close(){\n\n    }\n")),Object(a.b)("p",null,"We can describe it in a module:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"as ",Object(a.b)("inlineCode",{parentName:"li"},"factory")," - to produce a new instance each time the ",Object(a.b)("inlineCode",{parentName:"li"},"by inject()")," or ",Object(a.b)("inlineCode",{parentName:"li"},"get()")," is called")),Object(a.b)("p",null,"Using the as factory you will have to manually close the bloc."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-dart"})," // Factory instance of LoginBloc\nfinal flutterModule = Module()..factory((s) => LoginBloc());\n")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"as ",Object(a.b)("inlineCode",{parentName:"li"},"scope")," - to produce an instance tied to a scope")),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-dart"}),"module()..scopeWithType(named('scope_id'),(scope){\n  scope.scoped((s) => LoginBloc());\n});\n")),Object(a.b)("h2",{id:"scopestatemixin"},"ScopeStateMixin"),Object(a.b)("p",null,"Koin gives the ",Object(a.b)("inlineCode",{parentName:"p"},"ScopeStateMixin")," mixin already bound to your Flutter ",Object(a.b)("inlineCode",{parentName:"p"},"StatefulWidget")," lifecycle. On ",Object(a.b)("inlineCode",{parentName:"p"},"dispose()")," is calld, it will close automatically. ScopeStateMixin overrides the ",Object(a.b)("inlineCode",{parentName:"p"},"dispose")," method to call the ",Object(a.b)("inlineCode",{parentName:"p"},"close")," method of the current scope."),Object(a.b)("p",null,"To benefit from the ",Object(a.b)("inlineCode",{parentName:"p"},"lifecycleScope"),", you have to use the ",Object(a.b)("inlineCode",{parentName:"p"},"ScopeStateMixin")," in ",Object(a.b)("inlineCode",{parentName:"p"},"StatefulWidget")," related to a scope."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-dart"}),"class LoginPage extends StatefulWidget {\n  @override\n  _LoginPageState createState() => _LoginPageState();\n}\n\n/// When LoginPage is removed from the tree the scope will be automatically closed.\nclass _LoginPageState extends State<LoginPage> with ScopeStateMixin {\n  LoginBloc loginBlock;\n\n  @override\n  void initState() {\n    // or directly retrieve instance\n    loginBlock = currentScope.get();\n    super.initState();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Container();\n  }\n}\n")),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-dart"}),"var loginModule = Module()\n  // Declare a scope to LoginPage\n  ..scope<LoginPage>((s) {\n    s.scoped((s) => LoginBloc());\n  });\n")))}p.isMDXComponent=!0},177:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var o=n(0),r=n.n(o);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),p=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=p(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=r.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=p(n),b=o,m=d["".concat(i,".").concat(b)]||d[b]||u[b]||a;return n?r.a.createElement(m,c(c({ref:t},s),{},{components:n})):r.a.createElement(m,c({ref:t},s))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=b;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var s=2;s<a;s++)i[s]=n[s];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);